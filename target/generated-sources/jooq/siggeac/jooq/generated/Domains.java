/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated;


import org.jooq.Domain;
import org.jooq.Schema;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.LazySchema;
import org.jooq.impl.SQLDataType;


/**
 * Convenience access to all Domains in MDD.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Domains {

    /**
     * The domain <code>MDD.bureau</code>.
     */
    public static final Domain<String> BUREAU = Internal.createDomain(
          schema()
        , DSL.name("bureau")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK ((VALUE ~ similar_to_escape('[A-Z][0-9]{1,2}-[0-9]{4}(-[0-9]{2})?'::text)))")
    );

    /**
     * The domain <code>MDD.cause</code>.
     */
    public static final Domain<String> CAUSE = Internal.createDomain(
          schema()
        , DSL.name("cause")
        , DSL.comment("")
        , SQLDataType.CLOB
    );

    /**
     * The domain <code>MDD.cdc</code>.
     */
    public static final Domain<Short> CDC = Internal.createDomain(
          schema()
        , DSL.name("cdc")
        , DSL.comment("")
        , SQLDataType.SMALLINT
        , Internal.createCheck(null, null, "CHECK (((VALUE >= 1) AND (VALUE <= 90)))")
    );

    /**
     * The domain <code>MDD.matriculee</code>.
     */
    public static final Domain<String> MATRICULEE = Internal.createDomain(
          schema()
        , DSL.name("matriculee")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK ((VALUE ~ similar_to_escape('[a-z]{4}[0-9]{4}'::text)))")
    );

    /**
     * The domain <code>MDD.matriculep</code>.
     */
    public static final Domain<String> MATRICULEP = Internal.createDomain(
          schema()
        , DSL.name("matriculep")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK ((VALUE ~ similar_to_escape('[a-z]{4}[0-9]{4}'::text)))")
    );

    /**
     * The domain <code>MDD.nogroupe</code>.
     */
    public static final Domain<String> NOGROUPE = Internal.createDomain(
          schema()
        , DSL.name("nogroupe")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK ((VALUE ~ similar_to_escape('[0-9]{2}'::text)))")
    );

    /**
     * The domain <code>MDD.nom</code>.
     */
    public static final Domain<String> NOM = Internal.createDomain(
          schema()
        , DSL.name("nom")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK (((length(VALUE) <= 120) AND (VALUE ~ similar_to_escape('[[:alpha:]]+([-â€™ [:alpha:]])*[[:alpha:]]+'::text))))")
    );

    /**
     * The domain <code>MDD.note</code>.
     */
    public static final Domain<Short> NOTE = Internal.createDomain(
          schema()
        , DSL.name("note")
        , DSL.comment("")
        , SQLDataType.SMALLINT
        , Internal.createCheck(null, null, "CHECK (((VALUE >= 1) AND (VALUE <= 90)))")
    );

    /**
     * The domain <code>MDD.sigle</code>.
     */
    public static final Domain<String> SIGLE = Internal.createDomain(
          schema()
        , DSL.name("sigle")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK ((VALUE ~ similar_to_escape('[A-Z]{3}[0-9]{3}'::text)))")
    );

    /**
     * The domain <code>MDD.titre</code>.
     */
    public static final Domain<String> TITRE = Internal.createDomain(
          schema()
        , DSL.name("titre")
        , DSL.comment("")
        , SQLDataType.CLOB
    );

    /**
     * The domain <code>MDD.trimestre</code>.
     */
    public static final Domain<String> TRIMESTRE = Internal.createDomain(
          schema()
        , DSL.name("trimestre")
        , DSL.comment("")
        , SQLDataType.CLOB
        , Internal.createCheck(null, null, "CHECK ((VALUE ~ similar_to_escape('[0-9]{4}-[1-3]'::text)))")
    );

    private static final Schema schema() {
        return new LazySchema(DSL.name("MDD"), DSL.comment(""), () -> Mdd.MDD);
    }
}
