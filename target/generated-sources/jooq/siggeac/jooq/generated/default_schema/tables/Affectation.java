/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.default_schema.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.default_schema.DefaultSchema;
import siggeac.jooq.generated.default_schema.Domains;
import siggeac.jooq.generated.default_schema.Keys;
import siggeac.jooq.generated.default_schema.tables.Groupe.GroupePath;
import siggeac.jooq.generated.default_schema.tables.Professeur.ProfesseurPath;
import siggeac.jooq.generated.default_schema.tables.records.AffectationRecord;


/**
 * La personne enseignante (identifiée par "matriculeP") assure la formation du
 * groupe identifié par les  sigle "sigle", le numéro "noGroupe" et le trimestre
 * "trimestre". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Affectation extends TableImpl<AffectationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>affectation</code>
     */
    public static final Affectation AFFECTATION = new Affectation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AffectationRecord> getRecordType() {
        return AffectationRecord.class;
    }

    /**
     * The column <code>affectation.sigle</code>.
     */
    public final TableField<AffectationRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>affectation.trimestre</code>.
     */
    public final TableField<AffectationRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), Domains.TRIMESTRE.getDataType().nullable(false), this, "");

    /**
     * The column <code>affectation.nogroupe</code>.
     */
    public final TableField<AffectationRecord, String> NOGROUPE = createField(DSL.name("nogroupe"), Domains.NOGROUPE.getDataType().nullable(false), this, "");

    /**
     * The column <code>affectation.matriculep</code>.
     */
    public final TableField<AffectationRecord, String> MATRICULEP = createField(DSL.name("matriculep"), Domains.MATRICULEP.getDataType().nullable(false), this, "");

    private Affectation(Name alias, Table<AffectationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Affectation(Name alias, Table<AffectationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par \"matriculeP\") assure la formation du groupe identifié par les  sigle \"sigle\", le numéro \"noGroupe\" et le trimestre \"trimestre\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>affectation</code> table reference
     */
    public Affectation(String alias) {
        this(DSL.name(alias), AFFECTATION);
    }

    /**
     * Create an aliased <code>affectation</code> table reference
     */
    public Affectation(Name alias) {
        this(alias, AFFECTATION);
    }

    /**
     * Create a <code>affectation</code> table reference
     */
    public Affectation() {
        this(DSL.name("affectation"), null);
    }

    public <O extends Record> Affectation(Table<O> path, ForeignKey<O, AffectationRecord> childPath, InverseForeignKey<O, AffectationRecord> parentPath) {
        super(path, childPath, parentPath, AFFECTATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AffectationPath extends Affectation implements Path<AffectationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AffectationPath(Table<O> path, ForeignKey<O, AffectationRecord> childPath, InverseForeignKey<O, AffectationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AffectationPath(Name alias, Table<AffectationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AffectationPath as(String alias) {
            return new AffectationPath(DSL.name(alias), this);
        }

        @Override
        public AffectationPath as(Name alias) {
            return new AffectationPath(alias, this);
        }

        @Override
        public AffectationPath as(Table<?> alias) {
            return new AffectationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AffectationRecord> getPrimaryKey() {
        return Keys.AFFECTATION_CC0;
    }

    @Override
    public List<ForeignKey<AffectationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AFFECTATION__AFFECTATION_CR0, Keys.AFFECTATION__AFFECTATION_CR1);
    }

    private transient GroupePath _groupe;

    /**
     * Get the implicit join path to the <code>groupe</code> table.
     */
    public GroupePath groupe() {
        if (_groupe == null)
            _groupe = new GroupePath(this, Keys.AFFECTATION__AFFECTATION_CR0, null);

        return _groupe;
    }

    private transient ProfesseurPath _professeur;

    /**
     * Get the implicit join path to the <code>professeur</code> table.
     */
    public ProfesseurPath professeur() {
        if (_professeur == null)
            _professeur = new ProfesseurPath(this, Keys.AFFECTATION__AFFECTATION_CR1, null);

        return _professeur;
    }

    @Override
    public Affectation as(String alias) {
        return new Affectation(DSL.name(alias), this);
    }

    @Override
    public Affectation as(Name alias) {
        return new Affectation(alias, this);
    }

    @Override
    public Affectation as(Table<?> alias) {
        return new Affectation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Affectation rename(String name) {
        return new Affectation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Affectation rename(Name name) {
        return new Affectation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Affectation rename(Table<?> name) {
        return new Affectation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affectation where(Condition condition) {
        return new Affectation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affectation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affectation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affectation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affectation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affectation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affectation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affectation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affectation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affectation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
