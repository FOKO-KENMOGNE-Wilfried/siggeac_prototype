/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.default_schema.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.default_schema.DefaultSchema;
import siggeac.jooq.generated.default_schema.Domains;
import siggeac.jooq.generated.default_schema.Keys;
import siggeac.jooq.generated.default_schema.tables.Professeur.ProfesseurPath;
import siggeac.jooq.generated.default_schema.tables.records.ProfesseurBureauAbsRecord;


/**
 * La personne enseignante (identifiée par le matricule "matriculeP") n’a pas de
 * bureau pour la raison "cause". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProfesseurBureauAbs extends TableImpl<ProfesseurBureauAbsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>professeur_bureau_abs</code>
     */
    public static final ProfesseurBureauAbs PROFESSEUR_BUREAU_ABS = new ProfesseurBureauAbs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfesseurBureauAbsRecord> getRecordType() {
        return ProfesseurBureauAbsRecord.class;
    }

    /**
     * The column <code>professeur_bureau_abs.matriculep</code>.
     */
    public final TableField<ProfesseurBureauAbsRecord, String> MATRICULEP = createField(DSL.name("matriculep"), Domains.MATRICULEP.getDataType().nullable(false), this, "");

    /**
     * The column <code>professeur_bureau_abs.cause</code>.
     */
    public final TableField<ProfesseurBureauAbsRecord, String> CAUSE = createField(DSL.name("cause"), Domains.CAUSE.getDataType().nullable(false), this, "");

    private ProfesseurBureauAbs(Name alias, Table<ProfesseurBureauAbsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProfesseurBureauAbs(Name alias, Table<ProfesseurBureauAbsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par le matricule \"matriculeP\") n’a pas de bureau pour la raison \"cause\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>professeur_bureau_abs</code> table reference
     */
    public ProfesseurBureauAbs(String alias) {
        this(DSL.name(alias), PROFESSEUR_BUREAU_ABS);
    }

    /**
     * Create an aliased <code>professeur_bureau_abs</code> table reference
     */
    public ProfesseurBureauAbs(Name alias) {
        this(alias, PROFESSEUR_BUREAU_ABS);
    }

    /**
     * Create a <code>professeur_bureau_abs</code> table reference
     */
    public ProfesseurBureauAbs() {
        this(DSL.name("professeur_bureau_abs"), null);
    }

    public <O extends Record> ProfesseurBureauAbs(Table<O> path, ForeignKey<O, ProfesseurBureauAbsRecord> childPath, InverseForeignKey<O, ProfesseurBureauAbsRecord> parentPath) {
        super(path, childPath, parentPath, PROFESSEUR_BUREAU_ABS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProfesseurBureauAbsPath extends ProfesseurBureauAbs implements Path<ProfesseurBureauAbsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProfesseurBureauAbsPath(Table<O> path, ForeignKey<O, ProfesseurBureauAbsRecord> childPath, InverseForeignKey<O, ProfesseurBureauAbsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProfesseurBureauAbsPath(Name alias, Table<ProfesseurBureauAbsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProfesseurBureauAbsPath as(String alias) {
            return new ProfesseurBureauAbsPath(DSL.name(alias), this);
        }

        @Override
        public ProfesseurBureauAbsPath as(Name alias) {
            return new ProfesseurBureauAbsPath(alias, this);
        }

        @Override
        public ProfesseurBureauAbsPath as(Table<?> alias) {
            return new ProfesseurBureauAbsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProfesseurBureauAbsRecord> getPrimaryKey() {
        return Keys.PROFESSEUR_BUREAU_ABS_CC0;
    }

    @Override
    public List<ForeignKey<ProfesseurBureauAbsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROFESSEUR_BUREAU_ABS__PROFESSEUR_BUREAU_ABS_CR1);
    }

    private transient ProfesseurPath _professeur;

    /**
     * Get the implicit join path to the <code>professeur</code> table.
     */
    public ProfesseurPath professeur() {
        if (_professeur == null)
            _professeur = new ProfesseurPath(this, Keys.PROFESSEUR_BUREAU_ABS__PROFESSEUR_BUREAU_ABS_CR1, null);

        return _professeur;
    }

    @Override
    public ProfesseurBureauAbs as(String alias) {
        return new ProfesseurBureauAbs(DSL.name(alias), this);
    }

    @Override
    public ProfesseurBureauAbs as(Name alias) {
        return new ProfesseurBureauAbs(alias, this);
    }

    @Override
    public ProfesseurBureauAbs as(Table<?> alias) {
        return new ProfesseurBureauAbs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauAbs rename(String name) {
        return new ProfesseurBureauAbs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauAbs rename(Name name) {
        return new ProfesseurBureauAbs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauAbs rename(Table<?> name) {
        return new ProfesseurBureauAbs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauAbs where(Condition condition) {
        return new ProfesseurBureauAbs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauAbs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauAbs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauAbs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauAbs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauAbs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauAbs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauAbs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauAbs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauAbs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
