/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.default_schema.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.default_schema.DefaultSchema;
import siggeac.jooq.generated.default_schema.Domains;
import siggeac.jooq.generated.default_schema.tables.records.OffrePlanNonCouverteRecord;


/**
 * Détermine les cours de l’offre (planifiée) non couverts par l’affectation
 * (offre effective).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OffrePlanNonCouverte extends TableImpl<OffrePlanNonCouverteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>offre_plan_non_couverte</code>
     */
    public static final OffrePlanNonCouverte OFFRE_PLAN_NON_COUVERTE = new OffrePlanNonCouverte();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OffrePlanNonCouverteRecord> getRecordType() {
        return OffrePlanNonCouverteRecord.class;
    }

    /**
     * The column <code>offre_plan_non_couverte.sigle</code>.
     */
    public final TableField<OffrePlanNonCouverteRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType(), this, "");

    /**
     * The column <code>offre_plan_non_couverte.trimestre</code>.
     */
    public final TableField<OffrePlanNonCouverteRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), Domains.TRIMESTRE.getDataType(), this, "");

    private OffrePlanNonCouverte(Name alias, Table<OffrePlanNonCouverteRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private OffrePlanNonCouverte(Name alias, Table<OffrePlanNonCouverteRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private OffrePlanNonCouverte(Name alias, Table<OffrePlanNonCouverteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Détermine les cours de l’offre (planifiée) non couverts par l’affectation (offre effective)."), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>offre_plan_non_couverte</code> table reference
     */
    public OffrePlanNonCouverte(String alias) {
        this(DSL.name(alias), OFFRE_PLAN_NON_COUVERTE);
    }

    /**
     * Create an aliased <code>offre_plan_non_couverte</code> table reference
     */
    public OffrePlanNonCouverte(Name alias) {
        this(alias, OFFRE_PLAN_NON_COUVERTE);
    }

    /**
     * Create a <code>offre_plan_non_couverte</code> table reference
     */
    public OffrePlanNonCouverte() {
        this(DSL.name("offre_plan_non_couverte"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public OffrePlanNonCouverte as(String alias) {
        return new OffrePlanNonCouverte(DSL.name(alias), this, parameters);
    }

    @Override
    public OffrePlanNonCouverte as(Name alias) {
        return new OffrePlanNonCouverte(alias, this, parameters);
    }

    @Override
    public OffrePlanNonCouverte as(Table<?> alias) {
        return new OffrePlanNonCouverte(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public OffrePlanNonCouverte rename(String name) {
        return new OffrePlanNonCouverte(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public OffrePlanNonCouverte rename(Name name) {
        return new OffrePlanNonCouverte(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public OffrePlanNonCouverte rename(Table<?> name) {
        return new OffrePlanNonCouverte(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public OffrePlanNonCouverte call() {
        OffrePlanNonCouverte result = new OffrePlanNonCouverte(DSL.name("offre_plan_non_couverte"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
