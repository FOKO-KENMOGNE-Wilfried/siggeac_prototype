/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.default_schema.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.default_schema.DefaultSchema;
import siggeac.jooq.generated.default_schema.Domains;
import siggeac.jooq.generated.default_schema.Keys;
import siggeac.jooq.generated.default_schema.tables.Cours.CoursPath;
import siggeac.jooq.generated.default_schema.tables.records.OffreRecord;


/**
 * l’Université s’engage à offrir le cours "sigle" au trimestre "trimestre". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Offre extends TableImpl<OffreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>offre</code>
     */
    public static final Offre OFFRE = new Offre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OffreRecord> getRecordType() {
        return OffreRecord.class;
    }

    /**
     * The column <code>offre.sigle</code>.
     */
    public final TableField<OffreRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>offre.trimestre</code>.
     */
    public final TableField<OffreRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), Domains.TRIMESTRE.getDataType().nullable(false), this, "");

    private Offre(Name alias, Table<OffreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Offre(Name alias, Table<OffreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("l’Université s’engage à offrir le cours \"sigle\" au trimestre \"trimestre\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>offre</code> table reference
     */
    public Offre(String alias) {
        this(DSL.name(alias), OFFRE);
    }

    /**
     * Create an aliased <code>offre</code> table reference
     */
    public Offre(Name alias) {
        this(alias, OFFRE);
    }

    /**
     * Create a <code>offre</code> table reference
     */
    public Offre() {
        this(DSL.name("offre"), null);
    }

    public <O extends Record> Offre(Table<O> path, ForeignKey<O, OffreRecord> childPath, InverseForeignKey<O, OffreRecord> parentPath) {
        super(path, childPath, parentPath, OFFRE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OffrePath extends Offre implements Path<OffreRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OffrePath(Table<O> path, ForeignKey<O, OffreRecord> childPath, InverseForeignKey<O, OffreRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OffrePath(Name alias, Table<OffreRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OffrePath as(String alias) {
            return new OffrePath(DSL.name(alias), this);
        }

        @Override
        public OffrePath as(Name alias) {
            return new OffrePath(alias, this);
        }

        @Override
        public OffrePath as(Table<?> alias) {
            return new OffrePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OffreRecord> getPrimaryKey() {
        return Keys.OFFRE_CC0;
    }

    @Override
    public List<ForeignKey<OffreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OFFRE__OFFRE_CR0);
    }

    private transient CoursPath _cours;

    /**
     * Get the implicit join path to the <code>cours</code> table.
     */
    public CoursPath cours() {
        if (_cours == null)
            _cours = new CoursPath(this, Keys.OFFRE__OFFRE_CR0, null);

        return _cours;
    }

    @Override
    public Offre as(String alias) {
        return new Offre(DSL.name(alias), this);
    }

    @Override
    public Offre as(Name alias) {
        return new Offre(alias, this);
    }

    @Override
    public Offre as(Table<?> alias) {
        return new Offre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offre rename(String name) {
        return new Offre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offre rename(Name name) {
        return new Offre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offre rename(Table<?> name) {
        return new Offre(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Offre where(Condition condition) {
        return new Offre(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Offre where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Offre where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Offre where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Offre where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Offre where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Offre where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Offre where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Offre whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Offre whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
