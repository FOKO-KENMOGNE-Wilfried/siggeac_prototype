/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.default_schema.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.default_schema.DefaultSchema;
import siggeac.jooq.generated.default_schema.Domains;
import siggeac.jooq.generated.default_schema.Keys;
import siggeac.jooq.generated.default_schema.tables.Inscription.InscriptionPath;
import siggeac.jooq.generated.default_schema.tables.records.EvaluationRecord;


/**
 * La personne étudiante (identifiée par "matriculeE") inscrite au groupe
 * identifié par sigle "sigle", le numéro "noGroupe" et le trimestre "trimestre"
 * a obtenu la note "note". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Evaluation extends TableImpl<EvaluationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>evaluation</code>
     */
    public static final Evaluation EVALUATION = new Evaluation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EvaluationRecord> getRecordType() {
        return EvaluationRecord.class;
    }

    /**
     * The column <code>evaluation.matriculee</code>.
     */
    public final TableField<EvaluationRecord, String> MATRICULEE = createField(DSL.name("matriculee"), Domains.MATRICULEE.getDataType().nullable(false), this, "");

    /**
     * The column <code>evaluation.sigle</code>.
     */
    public final TableField<EvaluationRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>evaluation.trimestre</code>.
     */
    public final TableField<EvaluationRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), Domains.TRIMESTRE.getDataType().nullable(false), this, "");

    /**
     * The column <code>evaluation.nogroupe</code>.
     */
    public final TableField<EvaluationRecord, String> NOGROUPE = createField(DSL.name("nogroupe"), Domains.NOGROUPE.getDataType().nullable(false), this, "");

    /**
     * The column <code>evaluation.note</code>.
     */
    public final TableField<EvaluationRecord, Short> NOTE = createField(DSL.name("note"), Domains.NOTE.getDataType().nullable(false), this, "");

    private Evaluation(Name alias, Table<EvaluationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Evaluation(Name alias, Table<EvaluationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("La personne étudiante (identifiée par \"matriculeE\") inscrite au groupe identifié par sigle \"sigle\", le numéro \"noGroupe\" et le trimestre \"trimestre\" a obtenu la note \"note\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>evaluation</code> table reference
     */
    public Evaluation(String alias) {
        this(DSL.name(alias), EVALUATION);
    }

    /**
     * Create an aliased <code>evaluation</code> table reference
     */
    public Evaluation(Name alias) {
        this(alias, EVALUATION);
    }

    /**
     * Create a <code>evaluation</code> table reference
     */
    public Evaluation() {
        this(DSL.name("evaluation"), null);
    }

    public <O extends Record> Evaluation(Table<O> path, ForeignKey<O, EvaluationRecord> childPath, InverseForeignKey<O, EvaluationRecord> parentPath) {
        super(path, childPath, parentPath, EVALUATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EvaluationPath extends Evaluation implements Path<EvaluationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EvaluationPath(Table<O> path, ForeignKey<O, EvaluationRecord> childPath, InverseForeignKey<O, EvaluationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EvaluationPath(Name alias, Table<EvaluationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EvaluationPath as(String alias) {
            return new EvaluationPath(DSL.name(alias), this);
        }

        @Override
        public EvaluationPath as(Name alias) {
            return new EvaluationPath(alias, this);
        }

        @Override
        public EvaluationPath as(Table<?> alias) {
            return new EvaluationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EvaluationRecord> getPrimaryKey() {
        return Keys.EVALUATION_CC0;
    }

    @Override
    public List<ForeignKey<EvaluationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVALUATION__EVALUATION_CR0);
    }

    private transient InscriptionPath _inscription;

    /**
     * Get the implicit join path to the <code>inscription</code> table.
     */
    public InscriptionPath inscription() {
        if (_inscription == null)
            _inscription = new InscriptionPath(this, Keys.EVALUATION__EVALUATION_CR0, null);

        return _inscription;
    }

    @Override
    public Evaluation as(String alias) {
        return new Evaluation(DSL.name(alias), this);
    }

    @Override
    public Evaluation as(Name alias) {
        return new Evaluation(alias, this);
    }

    @Override
    public Evaluation as(Table<?> alias) {
        return new Evaluation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluation rename(String name) {
        return new Evaluation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluation rename(Name name) {
        return new Evaluation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluation rename(Table<?> name) {
        return new Evaluation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Condition condition) {
        return new Evaluation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
