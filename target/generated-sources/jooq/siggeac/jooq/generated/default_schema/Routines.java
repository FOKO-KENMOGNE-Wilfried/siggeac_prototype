/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.default_schema;


import java.time.LocalDate;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;

import siggeac.jooq.generated.default_schema.routines.AjouterAffectation;
import siggeac.jooq.generated.default_schema.routines.AjouterCompetence;
import siggeac.jooq.generated.default_schema.routines.AjouterCours;
import siggeac.jooq.generated.default_schema.routines.AjouterDisponibilite;
import siggeac.jooq.generated.default_schema.routines.AjouterEtudiant;
import siggeac.jooq.generated.default_schema.routines.AjouterGroupe;
import siggeac.jooq.generated.default_schema.routines.AjouterInscription;
import siggeac.jooq.generated.default_schema.routines.AjouterOffre;
import siggeac.jooq.generated.default_schema.routines.AjouterPrealable;
import siggeac.jooq.generated.default_schema.routines.AjouterProfesseur;
import siggeac.jooq.generated.default_schema.routines.AttribuerNote;
import siggeac.jooq.generated.default_schema.routines.EtudiantRemplitPréalables;
import siggeac.jooq.generated.default_schema.routines.ModifierCours;
import siggeac.jooq.generated.default_schema.routines.ModifierEtudiant;
import siggeac.jooq.generated.default_schema.routines.ModifierProfesseur;
import siggeac.jooq.generated.default_schema.routines.OffreEffConforme;
import siggeac.jooq.generated.default_schema.routines.RetirerAffectation;
import siggeac.jooq.generated.default_schema.routines.RetirerCompetence;
import siggeac.jooq.generated.default_schema.routines.RetirerCours;
import siggeac.jooq.generated.default_schema.routines.RetirerDisponibilite;
import siggeac.jooq.generated.default_schema.routines.RetirerEtudiant;
import siggeac.jooq.generated.default_schema.routines.RetirerGroupe;
import siggeac.jooq.generated.default_schema.routines.RetirerInscription;
import siggeac.jooq.generated.default_schema.routines.RetirerOffre;
import siggeac.jooq.generated.default_schema.routines.RetirerPrealable;
import siggeac.jooq.generated.default_schema.routines.RetirerProfesseur;
import siggeac.jooq.generated.default_schema.tables.OffrePlanNonCouverte;
import siggeac.jooq.generated.default_schema.tables.records.OffrePlanNonCouverteRecord;


/**
 * Convenience access to all stored procedures and functions in the default
 * schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Routines {

    /**
     * Call <code>ajouter_affectation</code>
     */
    public static void ajouterAffectation(
          Configuration configuration
        , String pSigle
        , String pTrimestre
        , String pNogroupe
        , String pMatriculep
    ) {
        AjouterAffectation p = new AjouterAffectation();
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);
        p.setPMatriculep(pMatriculep);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_competence</code>
     */
    public static void ajouterCompetence(
          Configuration configuration
        , String pSigle
        , String pMatriculep
    ) {
        AjouterCompetence p = new AjouterCompetence();
        p.setPSigle(pSigle);
        p.setPMatriculep(pMatriculep);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_cours</code>
     */
    public static void ajouterCours(
          Configuration configuration
        , String pSigle
        , String pTitre
        , Short pCredit
    ) {
        AjouterCours p = new AjouterCours();
        p.setPSigle(pSigle);
        p.setPTitre(pTitre);
        p.setPCredit(pCredit);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_disponibilite</code>
     */
    public static void ajouterDisponibilite(
          Configuration configuration
        , String pTrimestre
        , String pMatriculep
    ) {
        AjouterDisponibilite p = new AjouterDisponibilite();
        p.setPTrimestre(pTrimestre);
        p.setPMatriculep(pMatriculep);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_etudiant</code>
     */
    public static void ajouterEtudiant(
          Configuration configuration
        , String pMatriculee
        , String pNom
        , LocalDate pDdn
    ) {
        AjouterEtudiant p = new AjouterEtudiant();
        p.setPMatriculee(pMatriculee);
        p.setPNom(pNom);
        p.setPDdn(pDdn);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_groupe</code>
     */
    public static void ajouterGroupe(
          Configuration configuration
        , String pSigle
        , String pTrimestre
        , String pNogroupe
    ) {
        AjouterGroupe p = new AjouterGroupe();
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_inscription</code>
     */
    public static void ajouterInscription(
          Configuration configuration
        , String pMatriculee
        , String pSigle
        , String pTrimestre
        , String pNogroupe
    ) {
        AjouterInscription p = new AjouterInscription();
        p.setPMatriculee(pMatriculee);
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_offre</code>
     */
    public static void ajouterOffre(
          Configuration configuration
        , String pSigle
        , String pTrimestre
    ) {
        AjouterOffre p = new AjouterOffre();
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_prealable</code>
     */
    public static void ajouterPrealable(
          Configuration configuration
        , String pSigle
        , String pSigleprealable
    ) {
        AjouterPrealable p = new AjouterPrealable();
        p.setPSigle(pSigle);
        p.setPSigleprealable(pSigleprealable);

        p.execute(configuration);
    }

    /**
     * Call <code>ajouter_professeur</code>
     */
    public static void ajouterProfesseur(
          Configuration configuration
        , String pMatriculep
        , String pNom
        , String pBureau
        , String pCause
    ) {
        AjouterProfesseur p = new AjouterProfesseur();
        p.setPMatriculep(pMatriculep);
        p.setPNom(pNom);
        p.setPBureau(pBureau);
        p.setPCause(pCause);

        p.execute(configuration);
    }

    /**
     * Call <code>attribuer_note</code>
     */
    public static void attribuerNote(
          Configuration configuration
        , String pMatriculee
        , String pSigle
        , String pTrimestre
        , String pNogroupe
        , Short pNote
    ) {
        AttribuerNote p = new AttribuerNote();
        p.setPMatriculee(pMatriculee);
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);
        p.setPNote(pNote);

        p.execute(configuration);
    }

    /**
     * Call <code>etudiant_remplit_préalables</code>
     */
    public static Boolean etudiantRemplitPréalables(
          Configuration configuration
        , String pMatriculee
        , String pSigle
    ) {
        EtudiantRemplitPréalables f = new EtudiantRemplitPréalables();
        f.setPMatriculee(pMatriculee);
        f.setPSigle(pSigle);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>etudiant_remplit_préalables</code> as a field.
     */
    public static Field<Boolean> etudiantRemplitPréalables(
          String pMatriculee
        , String pSigle
    ) {
        EtudiantRemplitPréalables f = new EtudiantRemplitPréalables();
        f.setPMatriculee(pMatriculee);
        f.setPSigle(pSigle);

        return f.asField();
    }

    /**
     * Get <code>etudiant_remplit_préalables</code> as a field.
     */
    public static Field<Boolean> etudiantRemplitPréalables(
          Field<String> pMatriculee
        , Field<String> pSigle
    ) {
        EtudiantRemplitPréalables f = new EtudiantRemplitPréalables();
        f.setPMatriculee(pMatriculee);
        f.setPSigle(pSigle);

        return f.asField();
    }

    /**
     * Call <code>modifier_cours</code>
     */
    public static void modifierCours(
          Configuration configuration
        , String pSigle
        , String pTitre
        , Short pCredit
    ) {
        ModifierCours p = new ModifierCours();
        p.setPSigle(pSigle);
        p.setPTitre(pTitre);
        p.setPCredit(pCredit);

        p.execute(configuration);
    }

    /**
     * Call <code>modifier_etudiant</code>
     */
    public static void modifierEtudiant(
          Configuration configuration
        , String pMatriculee
        , String pNom
        , LocalDate pDdn
    ) {
        ModifierEtudiant p = new ModifierEtudiant();
        p.setPMatriculee(pMatriculee);
        p.setPNom(pNom);
        p.setPDdn(pDdn);

        p.execute(configuration);
    }

    /**
     * Call <code>modifier_professeur</code>
     */
    public static void modifierProfesseur(
          Configuration configuration
        , String pMatriculep
        , String pNom
        , String pBureau
        , String pCause
    ) {
        ModifierProfesseur p = new ModifierProfesseur();
        p.setPMatriculep(pMatriculep);
        p.setPNom(pNom);
        p.setPBureau(pBureau);
        p.setPCause(pCause);

        p.execute(configuration);
    }

    /**
     * Call <code>offre_eff_conforme</code>
     */
    public static Boolean offreEffConforme(
          Configuration configuration
    ) {
        OffreEffConforme f = new OffreEffConforme();

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>offre_eff_conforme</code> as a field.
     */
    public static Field<Boolean> offreEffConforme() {
        OffreEffConforme f = new OffreEffConforme();

        return f.asField();
    }

    /**
     * Call <code>retirer_affectation</code>
     */
    public static void retirerAffectation(
          Configuration configuration
        , String pSigle
        , String pTrimestre
        , String pNogroupe
    ) {
        RetirerAffectation p = new RetirerAffectation();
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_competence</code>
     */
    public static void retirerCompetence(
          Configuration configuration
        , String pSigle
        , String pMatriculep
    ) {
        RetirerCompetence p = new RetirerCompetence();
        p.setPSigle(pSigle);
        p.setPMatriculep(pMatriculep);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_cours</code>
     */
    public static void retirerCours(
          Configuration configuration
        , String pSigle
    ) {
        RetirerCours p = new RetirerCours();
        p.setPSigle(pSigle);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_disponibilite</code>
     */
    public static void retirerDisponibilite(
          Configuration configuration
        , String pTrimestre
        , String pMatriculep
    ) {
        RetirerDisponibilite p = new RetirerDisponibilite();
        p.setPTrimestre(pTrimestre);
        p.setPMatriculep(pMatriculep);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_etudiant</code>
     */
    public static void retirerEtudiant(
          Configuration configuration
        , String pMatriculee
    ) {
        RetirerEtudiant p = new RetirerEtudiant();
        p.setPMatriculee(pMatriculee);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_groupe</code>
     */
    public static void retirerGroupe(
          Configuration configuration
        , String pSigle
        , String pTrimestre
        , String pNogroupe
    ) {
        RetirerGroupe p = new RetirerGroupe();
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_inscription</code>
     */
    public static void retirerInscription(
          Configuration configuration
        , String pMatriculee
        , String pSigle
        , String pTrimestre
        , String pNogroupe
    ) {
        RetirerInscription p = new RetirerInscription();
        p.setPMatriculee(pMatriculee);
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);
        p.setPNogroupe(pNogroupe);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_offre</code>
     */
    public static void retirerOffre(
          Configuration configuration
        , String pSigle
        , String pTrimestre
    ) {
        RetirerOffre p = new RetirerOffre();
        p.setPSigle(pSigle);
        p.setPTrimestre(pTrimestre);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_prealable</code>
     */
    public static void retirerPrealable(
          Configuration configuration
        , String pSigle
        , String pSigleprealable
    ) {
        RetirerPrealable p = new RetirerPrealable();
        p.setPSigle(pSigle);
        p.setPSigleprealable(pSigleprealable);

        p.execute(configuration);
    }

    /**
     * Call <code>retirer_professeur</code>
     */
    public static void retirerProfesseur(
          Configuration configuration
        , String pMatriculep
    ) {
        RetirerProfesseur p = new RetirerProfesseur();
        p.setPMatriculep(pMatriculep);

        p.execute(configuration);
    }

    /**
     * Call <code>offre_plan_non_couverte</code>.
     */
    public static Result<OffrePlanNonCouverteRecord> offrePlanNonCouverte(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(siggeac.jooq.generated.default_schema.tables.OffrePlanNonCouverte.OFFRE_PLAN_NON_COUVERTE.call(
        )).fetch();
    }

    /**
     * Get <code>offre_plan_non_couverte</code> as a table.
     */
    public static OffrePlanNonCouverte offrePlanNonCouverte() {
        return siggeac.jooq.generated.default_schema.tables.OffrePlanNonCouverte.OFFRE_PLAN_NON_COUVERTE.call(
        );
    }
}
