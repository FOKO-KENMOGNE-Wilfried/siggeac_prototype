/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.Domains;
import siggeac.jooq.generated.Keys;
import siggeac.jooq.generated.Mdd;
import siggeac.jooq.generated.tables.Professeur.ProfesseurPath;
import siggeac.jooq.generated.tables.records.ProfesseurBureauPreRecord;


/**
 * La personne enseignante (identifiée par le matricule "matriculeP") a un
 * bureau et ce bureau est le "bureau". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProfesseurBureauPre extends TableImpl<ProfesseurBureauPreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.professeur_bureau_pre</code>
     */
    public static final ProfesseurBureauPre PROFESSEUR_BUREAU_PRE = new ProfesseurBureauPre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfesseurBureauPreRecord> getRecordType() {
        return ProfesseurBureauPreRecord.class;
    }

    /**
     * The column <code>MDD.professeur_bureau_pre.matriculep</code>.
     */
    public final TableField<ProfesseurBureauPreRecord, String> MATRICULEP = createField(DSL.name("matriculep"), Domains.MATRICULEP.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.professeur_bureau_pre.bureau</code>.
     */
    public final TableField<ProfesseurBureauPreRecord, String> BUREAU = createField(DSL.name("bureau"), Domains.BUREAU.getDataType().nullable(false), this, "");

    private ProfesseurBureauPre(Name alias, Table<ProfesseurBureauPreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProfesseurBureauPre(Name alias, Table<ProfesseurBureauPreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par le matricule \"matriculeP\") a un bureau et ce bureau est le \"bureau\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MDD.professeur_bureau_pre</code> table reference
     */
    public ProfesseurBureauPre(String alias) {
        this(DSL.name(alias), PROFESSEUR_BUREAU_PRE);
    }

    /**
     * Create an aliased <code>MDD.professeur_bureau_pre</code> table reference
     */
    public ProfesseurBureauPre(Name alias) {
        this(alias, PROFESSEUR_BUREAU_PRE);
    }

    /**
     * Create a <code>MDD.professeur_bureau_pre</code> table reference
     */
    public ProfesseurBureauPre() {
        this(DSL.name("professeur_bureau_pre"), null);
    }

    public <O extends Record> ProfesseurBureauPre(Table<O> path, ForeignKey<O, ProfesseurBureauPreRecord> childPath, InverseForeignKey<O, ProfesseurBureauPreRecord> parentPath) {
        super(path, childPath, parentPath, PROFESSEUR_BUREAU_PRE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProfesseurBureauPrePath extends ProfesseurBureauPre implements Path<ProfesseurBureauPreRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProfesseurBureauPrePath(Table<O> path, ForeignKey<O, ProfesseurBureauPreRecord> childPath, InverseForeignKey<O, ProfesseurBureauPreRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProfesseurBureauPrePath(Name alias, Table<ProfesseurBureauPreRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProfesseurBureauPrePath as(String alias) {
            return new ProfesseurBureauPrePath(DSL.name(alias), this);
        }

        @Override
        public ProfesseurBureauPrePath as(Name alias) {
            return new ProfesseurBureauPrePath(alias, this);
        }

        @Override
        public ProfesseurBureauPrePath as(Table<?> alias) {
            return new ProfesseurBureauPrePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<ProfesseurBureauPreRecord> getPrimaryKey() {
        return Keys.PROFESSEUR_BUREAU_PRE_CC0;
    }

    @Override
    public List<ForeignKey<ProfesseurBureauPreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROFESSEUR_BUREAU_PRE__PROFESSEUR_BUREAU_PRE_CR0);
    }

    private transient ProfesseurPath _professeur;

    /**
     * Get the implicit join path to the <code>MDD.professeur</code> table.
     */
    public ProfesseurPath professeur() {
        if (_professeur == null)
            _professeur = new ProfesseurPath(this, Keys.PROFESSEUR_BUREAU_PRE__PROFESSEUR_BUREAU_PRE_CR0, null);

        return _professeur;
    }

    @Override
    public ProfesseurBureauPre as(String alias) {
        return new ProfesseurBureauPre(DSL.name(alias), this);
    }

    @Override
    public ProfesseurBureauPre as(Name alias) {
        return new ProfesseurBureauPre(alias, this);
    }

    @Override
    public ProfesseurBureauPre as(Table<?> alias) {
        return new ProfesseurBureauPre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauPre rename(String name) {
        return new ProfesseurBureauPre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauPre rename(Name name) {
        return new ProfesseurBureauPre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfesseurBureauPre rename(Table<?> name) {
        return new ProfesseurBureauPre(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauPre where(Condition condition) {
        return new ProfesseurBureauPre(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauPre where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauPre where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauPre where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauPre where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauPre where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauPre where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfesseurBureauPre where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauPre whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfesseurBureauPre whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
