/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.Domains;
import siggeac.jooq.generated.Keys;
import siggeac.jooq.generated.Mdd;
import siggeac.jooq.generated.tables.Affectation.AffectationPath;
import siggeac.jooq.generated.tables.Cours.CoursPath;
import siggeac.jooq.generated.tables.Inscription.InscriptionPath;
import siggeac.jooq.generated.tables.records.GroupeRecord;


/**
 * Le groupe (identifié par le sigle "sigle", le numéro "noGroupe" et le
 * trimestre "trimestre") est constitué. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Groupe extends TableImpl<GroupeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.groupe</code>
     */
    public static final Groupe GROUPE = new Groupe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupeRecord> getRecordType() {
        return GroupeRecord.class;
    }

    /**
     * The column <code>MDD.groupe.sigle</code>.
     */
    public final TableField<GroupeRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.groupe.trimestre</code>.
     */
    public final TableField<GroupeRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), Domains.TRIMESTRE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.groupe.nogroupe</code>.
     */
    public final TableField<GroupeRecord, String> NOGROUPE = createField(DSL.name("nogroupe"), Domains.NOGROUPE.getDataType().nullable(false), this, "");

    private Groupe(Name alias, Table<GroupeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Groupe(Name alias, Table<GroupeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Le groupe (identifié par le sigle \"sigle\", le numéro \"noGroupe\" et le trimestre \"trimestre\") est constitué. "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MDD.groupe</code> table reference
     */
    public Groupe(String alias) {
        this(DSL.name(alias), GROUPE);
    }

    /**
     * Create an aliased <code>MDD.groupe</code> table reference
     */
    public Groupe(Name alias) {
        this(alias, GROUPE);
    }

    /**
     * Create a <code>MDD.groupe</code> table reference
     */
    public Groupe() {
        this(DSL.name("groupe"), null);
    }

    public <O extends Record> Groupe(Table<O> path, ForeignKey<O, GroupeRecord> childPath, InverseForeignKey<O, GroupeRecord> parentPath) {
        super(path, childPath, parentPath, GROUPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GroupePath extends Groupe implements Path<GroupeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GroupePath(Table<O> path, ForeignKey<O, GroupeRecord> childPath, InverseForeignKey<O, GroupeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GroupePath(Name alias, Table<GroupeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GroupePath as(String alias) {
            return new GroupePath(DSL.name(alias), this);
        }

        @Override
        public GroupePath as(Name alias) {
            return new GroupePath(alias, this);
        }

        @Override
        public GroupePath as(Table<?> alias) {
            return new GroupePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<GroupeRecord> getPrimaryKey() {
        return Keys.GROUPE_CC0;
    }

    @Override
    public List<ForeignKey<GroupeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GROUPE__GROUPE_CR0);
    }

    private transient CoursPath _cours;

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table.
     */
    public CoursPath cours() {
        if (_cours == null)
            _cours = new CoursPath(this, Keys.GROUPE__GROUPE_CR0, null);

        return _cours;
    }

    private transient AffectationPath _affectation;

    /**
     * Get the implicit to-many join path to the <code>MDD.affectation</code>
     * table
     */
    public AffectationPath affectation() {
        if (_affectation == null)
            _affectation = new AffectationPath(this, null, Keys.AFFECTATION__AFFECTATION_CR0.getInverseKey());

        return _affectation;
    }

    private transient InscriptionPath _inscription;

    /**
     * Get the implicit to-many join path to the <code>MDD.inscription</code>
     * table
     */
    public InscriptionPath inscription() {
        if (_inscription == null)
            _inscription = new InscriptionPath(this, null, Keys.INSCRIPTION__INSCRIPTION_CR0.getInverseKey());

        return _inscription;
    }

    @Override
    public Groupe as(String alias) {
        return new Groupe(DSL.name(alias), this);
    }

    @Override
    public Groupe as(Name alias) {
        return new Groupe(alias, this);
    }

    @Override
    public Groupe as(Table<?> alias) {
        return new Groupe(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupe rename(String name) {
        return new Groupe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupe rename(Name name) {
        return new Groupe(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupe rename(Table<?> name) {
        return new Groupe(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Groupe where(Condition condition) {
        return new Groupe(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Groupe where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Groupe where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Groupe where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Groupe where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Groupe where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Groupe where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Groupe where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Groupe whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Groupe whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
