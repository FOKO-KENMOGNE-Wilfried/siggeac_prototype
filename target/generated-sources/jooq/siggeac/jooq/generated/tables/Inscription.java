/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.Domains;
import siggeac.jooq.generated.Keys;
import siggeac.jooq.generated.Mdd;
import siggeac.jooq.generated.tables.Evaluation.EvaluationPath;
import siggeac.jooq.generated.tables.Groupe.GroupePath;
import siggeac.jooq.generated.tables.records.InscriptionRecord;


/**
 * La personne étudiante (identifiée par "matriculeE") est inscrite au groupe
 * identifié par le sigle "sigle", le numéro "noGroupe" et le trimestre
 * "trimestre".
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Inscription extends TableImpl<InscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.inscription</code>
     */
    public static final Inscription INSCRIPTION = new Inscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InscriptionRecord> getRecordType() {
        return InscriptionRecord.class;
    }

    /**
     * The column <code>MDD.inscription.matriculee</code>.
     */
    public final TableField<InscriptionRecord, String> MATRICULEE = createField(DSL.name("matriculee"), Domains.MATRICULEE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.inscription.sigle</code>.
     */
    public final TableField<InscriptionRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.inscription.trimestre</code>.
     */
    public final TableField<InscriptionRecord, String> TRIMESTRE = createField(DSL.name("trimestre"), Domains.TRIMESTRE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.inscription.nogroupe</code>.
     */
    public final TableField<InscriptionRecord, String> NOGROUPE = createField(DSL.name("nogroupe"), Domains.NOGROUPE.getDataType().nullable(false), this, "");

    private Inscription(Name alias, Table<InscriptionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Inscription(Name alias, Table<InscriptionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("La personne étudiante (identifiée par \"matriculeE\") est inscrite au groupe identifié par le sigle \"sigle\", le numéro \"noGroupe\" et le trimestre \"trimestre\"."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MDD.inscription</code> table reference
     */
    public Inscription(String alias) {
        this(DSL.name(alias), INSCRIPTION);
    }

    /**
     * Create an aliased <code>MDD.inscription</code> table reference
     */
    public Inscription(Name alias) {
        this(alias, INSCRIPTION);
    }

    /**
     * Create a <code>MDD.inscription</code> table reference
     */
    public Inscription() {
        this(DSL.name("inscription"), null);
    }

    public <O extends Record> Inscription(Table<O> path, ForeignKey<O, InscriptionRecord> childPath, InverseForeignKey<O, InscriptionRecord> parentPath) {
        super(path, childPath, parentPath, INSCRIPTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InscriptionPath extends Inscription implements Path<InscriptionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> InscriptionPath(Table<O> path, ForeignKey<O, InscriptionRecord> childPath, InverseForeignKey<O, InscriptionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InscriptionPath(Name alias, Table<InscriptionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InscriptionPath as(String alias) {
            return new InscriptionPath(DSL.name(alias), this);
        }

        @Override
        public InscriptionPath as(Name alias) {
            return new InscriptionPath(alias, this);
        }

        @Override
        public InscriptionPath as(Table<?> alias) {
            return new InscriptionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<InscriptionRecord> getPrimaryKey() {
        return Keys.INSCRIPTION_CC0;
    }

    @Override
    public List<ForeignKey<InscriptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INSCRIPTION__INSCRIPTION_CR0);
    }

    private transient GroupePath _groupe;

    /**
     * Get the implicit join path to the <code>MDD.groupe</code> table.
     */
    public GroupePath groupe() {
        if (_groupe == null)
            _groupe = new GroupePath(this, Keys.INSCRIPTION__INSCRIPTION_CR0, null);

        return _groupe;
    }

    private transient EvaluationPath _evaluation;

    /**
     * Get the implicit to-many join path to the <code>MDD.evaluation</code>
     * table
     */
    public EvaluationPath evaluation() {
        if (_evaluation == null)
            _evaluation = new EvaluationPath(this, null, Keys.EVALUATION__EVALUATION_CR0.getInverseKey());

        return _evaluation;
    }

    @Override
    public Inscription as(String alias) {
        return new Inscription(DSL.name(alias), this);
    }

    @Override
    public Inscription as(Name alias) {
        return new Inscription(alias, this);
    }

    @Override
    public Inscription as(Table<?> alias) {
        return new Inscription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inscription rename(String name) {
        return new Inscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inscription rename(Name name) {
        return new Inscription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inscription rename(Table<?> name) {
        return new Inscription(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inscription where(Condition condition) {
        return new Inscription(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inscription where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inscription where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inscription where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inscription where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inscription where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inscription where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inscription where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inscription whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inscription whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
