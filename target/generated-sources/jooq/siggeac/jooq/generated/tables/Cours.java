/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.Domains;
import siggeac.jooq.generated.Keys;
import siggeac.jooq.generated.Mdd;
import siggeac.jooq.generated.tables.Competence.CompetencePath;
import siggeac.jooq.generated.tables.Disponibilite.DisponibilitePath;
import siggeac.jooq.generated.tables.Groupe.GroupePath;
import siggeac.jooq.generated.tables.Offre.OffrePath;
import siggeac.jooq.generated.tables.Prealable.PrealablePath;
import siggeac.jooq.generated.tables.Professeur.ProfesseurPath;
import siggeac.jooq.generated.tables.records.CoursRecord;


/**
 * Le cours (identifié par le sigle "sigle") est défini dans le répertoire des
 * cours offerts par l’Université. Il a pour titre "titre". Il comporte "credit"
 * crédit(s). 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cours extends TableImpl<CoursRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.cours</code>
     */
    public static final Cours COURS = new Cours();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursRecord> getRecordType() {
        return CoursRecord.class;
    }

    /**
     * The column <code>MDD.cours.sigle</code>.
     */
    public final TableField<CoursRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.cours.titre</code>.
     */
    public final TableField<CoursRecord, String> TITRE = createField(DSL.name("titre"), Domains.TITRE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.cours.credit</code>.
     */
    public final TableField<CoursRecord, Short> CREDIT = createField(DSL.name("credit"), Domains.CDC.getDataType().nullable(false), this, "");

    private Cours(Name alias, Table<CoursRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cours(Name alias, Table<CoursRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Le cours (identifié par le sigle \"sigle\") est défini dans le répertoire des cours offerts par l’Université. Il a pour titre \"titre\". Il comporte \"credit\" crédit(s). "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MDD.cours</code> table reference
     */
    public Cours(String alias) {
        this(DSL.name(alias), COURS);
    }

    /**
     * Create an aliased <code>MDD.cours</code> table reference
     */
    public Cours(Name alias) {
        this(alias, COURS);
    }

    /**
     * Create a <code>MDD.cours</code> table reference
     */
    public Cours() {
        this(DSL.name("cours"), null);
    }

    public <O extends Record> Cours(Table<O> path, ForeignKey<O, CoursRecord> childPath, InverseForeignKey<O, CoursRecord> parentPath) {
        super(path, childPath, parentPath, COURS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoursPath extends Cours implements Path<CoursRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoursPath(Table<O> path, ForeignKey<O, CoursRecord> childPath, InverseForeignKey<O, CoursRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoursPath(Name alias, Table<CoursRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoursPath as(String alias) {
            return new CoursPath(DSL.name(alias), this);
        }

        @Override
        public CoursPath as(Name alias) {
            return new CoursPath(alias, this);
        }

        @Override
        public CoursPath as(Table<?> alias) {
            return new CoursPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<CoursRecord> getPrimaryKey() {
        return Keys.COURS_CC0;
    }

    private transient CompetencePath _competence;

    /**
     * Get the implicit to-many join path to the <code>MDD.competence</code>
     * table
     */
    public CompetencePath competence() {
        if (_competence == null)
            _competence = new CompetencePath(this, null, Keys.COMPETENCE__COMPETENCE_CR0.getInverseKey());

        return _competence;
    }

    private transient DisponibilitePath _disponibilite;

    /**
     * Get the implicit to-many join path to the <code>MDD.disponibilite</code>
     * table
     */
    public DisponibilitePath disponibilite() {
        if (_disponibilite == null)
            _disponibilite = new DisponibilitePath(this, null, Keys.DISPONIBILITE__DISPONIBILITE_CR0.getInverseKey());

        return _disponibilite;
    }

    private transient GroupePath _groupe;

    /**
     * Get the implicit to-many join path to the <code>MDD.groupe</code> table
     */
    public GroupePath groupe() {
        if (_groupe == null)
            _groupe = new GroupePath(this, null, Keys.GROUPE__GROUPE_CR0.getInverseKey());

        return _groupe;
    }

    private transient OffrePath _offre;

    /**
     * Get the implicit to-many join path to the <code>MDD.offre</code> table
     */
    public OffrePath offre() {
        if (_offre == null)
            _offre = new OffrePath(this, null, Keys.OFFRE__OFFRE_CR0.getInverseKey());

        return _offre;
    }

    private transient PrealablePath _prealableCr0;

    /**
     * Get the implicit to-many join path to the <code>MDD.prealable</code>
     * table, via the <code>prealable_cr0</code> key
     */
    public PrealablePath prealableCr0() {
        if (_prealableCr0 == null)
            _prealableCr0 = new PrealablePath(this, null, Keys.PREALABLE__PREALABLE_CR0.getInverseKey());

        return _prealableCr0;
    }

    private transient PrealablePath _prealableCr1;

    /**
     * Get the implicit to-many join path to the <code>MDD.prealable</code>
     * table, via the <code>prealable_cr1</code> key
     */
    public PrealablePath prealableCr1() {
        if (_prealableCr1 == null)
            _prealableCr1 = new PrealablePath(this, null, Keys.PREALABLE__PREALABLE_CR1.getInverseKey());

        return _prealableCr1;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>MDD.professeur</code> table, via the <code>competence_cr1</code>
     * key
     */
    public ProfesseurPath competenceCr1() {
        return competence().professeur();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>MDD.professeur</code> table, via the <code>disponibilite_cr1</code>
     * key
     */
    public ProfesseurPath disponibiliteCr1() {
        return disponibilite().professeur();
    }

    @Override
    public Cours as(String alias) {
        return new Cours(DSL.name(alias), this);
    }

    @Override
    public Cours as(Name alias) {
        return new Cours(alias, this);
    }

    @Override
    public Cours as(Table<?> alias) {
        return new Cours(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cours rename(String name) {
        return new Cours(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cours rename(Name name) {
        return new Cours(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cours rename(Table<?> name) {
        return new Cours(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cours where(Condition condition) {
        return new Cours(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cours where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cours where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cours where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cours where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cours where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cours where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cours where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cours whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cours whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
