/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.Domains;
import siggeac.jooq.generated.Keys;
import siggeac.jooq.generated.Mdd;
import siggeac.jooq.generated.tables.Affectation.AffectationPath;
import siggeac.jooq.generated.tables.Competence.CompetencePath;
import siggeac.jooq.generated.tables.Cours.CoursPath;
import siggeac.jooq.generated.tables.Disponibilite.DisponibilitePath;
import siggeac.jooq.generated.tables.ProfesseurBureauAbs.ProfesseurBureauAbsPath;
import siggeac.jooq.generated.tables.ProfesseurBureauPre.ProfesseurBureauPrePath;
import siggeac.jooq.generated.tables.records.ProfesseurRecord;


/**
 * La personne enseignante (identifiée par le matricule "matriculeP") possède un
 * dossier à l’Université. Une personne enseignante est une professeure, un
 * professeur, une chargée de cours ou un chargé de cours. Son nom est "nom". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Professeur extends TableImpl<ProfesseurRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.professeur</code>
     */
    public static final Professeur PROFESSEUR = new Professeur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfesseurRecord> getRecordType() {
        return ProfesseurRecord.class;
    }

    /**
     * The column <code>MDD.professeur.matriculep</code>.
     */
    public final TableField<ProfesseurRecord, String> MATRICULEP = createField(DSL.name("matriculep"), Domains.MATRICULEP.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.professeur.nom</code>.
     */
    public final TableField<ProfesseurRecord, String> NOM = createField(DSL.name("nom"), Domains.NOM.getDataType().nullable(false), this, "");

    private Professeur(Name alias, Table<ProfesseurRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Professeur(Name alias, Table<ProfesseurRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("La personne enseignante (identifiée par le matricule \"matriculeP\") possède un dossier à l’Université. Une personne enseignante est une professeure, un professeur, une chargée de cours ou un chargé de cours. Son nom est \"nom\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MDD.professeur</code> table reference
     */
    public Professeur(String alias) {
        this(DSL.name(alias), PROFESSEUR);
    }

    /**
     * Create an aliased <code>MDD.professeur</code> table reference
     */
    public Professeur(Name alias) {
        this(alias, PROFESSEUR);
    }

    /**
     * Create a <code>MDD.professeur</code> table reference
     */
    public Professeur() {
        this(DSL.name("professeur"), null);
    }

    public <O extends Record> Professeur(Table<O> path, ForeignKey<O, ProfesseurRecord> childPath, InverseForeignKey<O, ProfesseurRecord> parentPath) {
        super(path, childPath, parentPath, PROFESSEUR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProfesseurPath extends Professeur implements Path<ProfesseurRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProfesseurPath(Table<O> path, ForeignKey<O, ProfesseurRecord> childPath, InverseForeignKey<O, ProfesseurRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProfesseurPath(Name alias, Table<ProfesseurRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProfesseurPath as(String alias) {
            return new ProfesseurPath(DSL.name(alias), this);
        }

        @Override
        public ProfesseurPath as(Name alias) {
            return new ProfesseurPath(alias, this);
        }

        @Override
        public ProfesseurPath as(Table<?> alias) {
            return new ProfesseurPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<ProfesseurRecord> getPrimaryKey() {
        return Keys.PROFESSEUR_CC0;
    }

    private transient AffectationPath _affectation;

    /**
     * Get the implicit to-many join path to the <code>MDD.affectation</code>
     * table
     */
    public AffectationPath affectation() {
        if (_affectation == null)
            _affectation = new AffectationPath(this, null, Keys.AFFECTATION__AFFECTATION_CR1.getInverseKey());

        return _affectation;
    }

    private transient CompetencePath _competence;

    /**
     * Get the implicit to-many join path to the <code>MDD.competence</code>
     * table
     */
    public CompetencePath competence() {
        if (_competence == null)
            _competence = new CompetencePath(this, null, Keys.COMPETENCE__COMPETENCE_CR1.getInverseKey());

        return _competence;
    }

    private transient DisponibilitePath _disponibilite;

    /**
     * Get the implicit to-many join path to the <code>MDD.disponibilite</code>
     * table
     */
    public DisponibilitePath disponibilite() {
        if (_disponibilite == null)
            _disponibilite = new DisponibilitePath(this, null, Keys.DISPONIBILITE__DISPONIBILITE_CR1.getInverseKey());

        return _disponibilite;
    }

    private transient ProfesseurBureauAbsPath _professeurBureauAbs;

    /**
     * Get the implicit to-many join path to the
     * <code>MDD.professeur_bureau_abs</code> table
     */
    public ProfesseurBureauAbsPath professeurBureauAbs() {
        if (_professeurBureauAbs == null)
            _professeurBureauAbs = new ProfesseurBureauAbsPath(this, null, Keys.PROFESSEUR_BUREAU_ABS__PROFESSEUR_BUREAU_ABS_CR1.getInverseKey());

        return _professeurBureauAbs;
    }

    private transient ProfesseurBureauPrePath _professeurBureauPre;

    /**
     * Get the implicit to-many join path to the
     * <code>MDD.professeur_bureau_pre</code> table
     */
    public ProfesseurBureauPrePath professeurBureauPre() {
        if (_professeurBureauPre == null)
            _professeurBureauPre = new ProfesseurBureauPrePath(this, null, Keys.PROFESSEUR_BUREAU_PRE__PROFESSEUR_BUREAU_PRE_CR0.getInverseKey());

        return _professeurBureauPre;
    }

    /**
     * Get the implicit many-to-many join path to the <code>MDD.cours</code>
     * table, via the <code>competence_cr0</code> key
     */
    public CoursPath competenceCr0() {
        return competence().cours();
    }

    /**
     * Get the implicit many-to-many join path to the <code>MDD.cours</code>
     * table, via the <code>disponibilite_cr0</code> key
     */
    public CoursPath disponibiliteCr0() {
        return disponibilite().cours();
    }

    @Override
    public Professeur as(String alias) {
        return new Professeur(DSL.name(alias), this);
    }

    @Override
    public Professeur as(Name alias) {
        return new Professeur(alias, this);
    }

    @Override
    public Professeur as(Table<?> alias) {
        return new Professeur(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Professeur rename(String name) {
        return new Professeur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professeur rename(Name name) {
        return new Professeur(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professeur rename(Table<?> name) {
        return new Professeur(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Professeur where(Condition condition) {
        return new Professeur(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Professeur where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Professeur where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Professeur where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Professeur where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Professeur where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Professeur where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Professeur where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Professeur whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Professeur whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
