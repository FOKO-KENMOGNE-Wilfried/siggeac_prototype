/*
 * This file is generated by jOOQ.
 */
package siggeac.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import siggeac.jooq.generated.Domains;
import siggeac.jooq.generated.Keys;
import siggeac.jooq.generated.Mdd;
import siggeac.jooq.generated.tables.Cours.CoursPath;
import siggeac.jooq.generated.tables.records.PrealableRecord;


/**
 * L’inscription au cours "sigle" n’est autorisée qu’aux personnes qui auront
 * réussi le cours "siglePréalable" avant le début du cours "sigle". 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Prealable extends TableImpl<PrealableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MDD.prealable</code>
     */
    public static final Prealable PREALABLE = new Prealable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrealableRecord> getRecordType() {
        return PrealableRecord.class;
    }

    /**
     * The column <code>MDD.prealable.sigle</code>.
     */
    public final TableField<PrealableRecord, String> SIGLE = createField(DSL.name("sigle"), Domains.SIGLE.getDataType().nullable(false), this, "");

    /**
     * The column <code>MDD.prealable.sigleprealable</code>.
     */
    public final TableField<PrealableRecord, String> SIGLEPREALABLE = createField(DSL.name("sigleprealable"), Domains.SIGLE.getDataType().nullable(false), this, "");

    private Prealable(Name alias, Table<PrealableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Prealable(Name alias, Table<PrealableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("L’inscription au cours \"sigle\" n’est autorisée qu’aux personnes qui auront réussi le cours \"siglePréalable\" avant le début du cours \"sigle\". "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MDD.prealable</code> table reference
     */
    public Prealable(String alias) {
        this(DSL.name(alias), PREALABLE);
    }

    /**
     * Create an aliased <code>MDD.prealable</code> table reference
     */
    public Prealable(Name alias) {
        this(alias, PREALABLE);
    }

    /**
     * Create a <code>MDD.prealable</code> table reference
     */
    public Prealable() {
        this(DSL.name("prealable"), null);
    }

    public <O extends Record> Prealable(Table<O> path, ForeignKey<O, PrealableRecord> childPath, InverseForeignKey<O, PrealableRecord> parentPath) {
        super(path, childPath, parentPath, PREALABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PrealablePath extends Prealable implements Path<PrealableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PrealablePath(Table<O> path, ForeignKey<O, PrealableRecord> childPath, InverseForeignKey<O, PrealableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PrealablePath(Name alias, Table<PrealableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PrealablePath as(String alias) {
            return new PrealablePath(DSL.name(alias), this);
        }

        @Override
        public PrealablePath as(Name alias) {
            return new PrealablePath(alias, this);
        }

        @Override
        public PrealablePath as(Table<?> alias) {
            return new PrealablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mdd.MDD;
    }

    @Override
    public UniqueKey<PrealableRecord> getPrimaryKey() {
        return Keys.PREALABLE_CC0;
    }

    @Override
    public List<ForeignKey<PrealableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PREALABLE__PREALABLE_CR0, Keys.PREALABLE__PREALABLE_CR1);
    }

    private transient CoursPath _prealableCr0;

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table, via the
     * <code>prealable_cr0</code> key.
     */
    public CoursPath prealableCr0() {
        if (_prealableCr0 == null)
            _prealableCr0 = new CoursPath(this, Keys.PREALABLE__PREALABLE_CR0, null);

        return _prealableCr0;
    }

    private transient CoursPath _prealableCr1;

    /**
     * Get the implicit join path to the <code>MDD.cours</code> table, via the
     * <code>prealable_cr1</code> key.
     */
    public CoursPath prealableCr1() {
        if (_prealableCr1 == null)
            _prealableCr1 = new CoursPath(this, Keys.PREALABLE__PREALABLE_CR1, null);

        return _prealableCr1;
    }

    @Override
    public Prealable as(String alias) {
        return new Prealable(DSL.name(alias), this);
    }

    @Override
    public Prealable as(Name alias) {
        return new Prealable(alias, this);
    }

    @Override
    public Prealable as(Table<?> alias) {
        return new Prealable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prealable rename(String name) {
        return new Prealable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prealable rename(Name name) {
        return new Prealable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prealable rename(Table<?> name) {
        return new Prealable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prealable where(Condition condition) {
        return new Prealable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prealable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prealable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prealable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prealable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prealable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prealable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Prealable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prealable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Prealable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
